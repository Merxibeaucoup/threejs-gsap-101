import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatDialog } from '@angular/material/dialog';
import { MinimalTokenExpiryDialogComponent } from './minimal-token-expiry-dialog.component';

@Component({
  selector: 'app-minimal-usage-example',
  standalone: true,
  imports: [CommonModule, MatButtonModule],
  template: `
    <div class="example-container">
      <h2>Minimal Token Expiry Dialog</h2>
      <p>Clean, simple design with urgency-based colors</p>
      
      <div class="button-group">
        <button mat-raised-button color="warn" (click)="showCritical()">
          Critical (2 min)
        </button>
        
        <button mat-raised-button color="accent" (click)="showWarning()">
          Warning (7 min)
        </button>
        
        <button mat-raised-button color="primary" (click)="showNormal()">
          Normal (15 min)
        </button>
      </div>

      <div class="code-example">
        <h3>Usage:</h3>
        <pre><code>this.dialog.open(MinimalTokenExpiryDialogComponent, {{
  data: {{ remainingMinutes: 5 }}
}});</code></pre>
      </div>
    </div>
  `,
  styles: [`
    .example-container {
      padding: 24px;
      max-width: 600px;
      margin: 0 auto;
    }

    .button-group {
      display: flex;
      gap: 16px;
      margin: 24px 0;
      flex-wrap: wrap;
    }

    .code-example {
      background: #f5f5f5;
      padding: 20px;
      border-radius: 8px;
      margin-top: 24px;
    }

    pre {
      background: #2d3748;
      color: #e2e8f0;
      padding: 16px;
      border-radius: 4px;
      overflow-x: auto;
    }
  `]
})
export class MinimalUsageExampleComponent {
  constructor(private dialog: MatDialog) {}

  showCritical(): void {
    this.openDialog(2);
  }

  showWarning(): void {
    this.openDialog(7);
  }

  showNormal(): void {
    this.openDialog(15);
  }

  private openDialog(remainingMinutes: number): void {
    this.dialog.open(MinimalTokenExpiryDialogComponent, {
      width: '450px',
      maxWidth: '90vw',
      data: { remainingMinutes },
      disableClose: remainingMinutes < 5, // Critical can't be dismissed
      autoFocus: true
    }).afterClosed().subscribe(result => {
      if (result) {
        console.log(`User action: ${result.action}`);
      }
    });
  }
}
