import { Component, Inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';

export interface TokenExpiryData {
  remainingMinutes: number;
}

@Component({
  selector: 'app-minimal-token-expiry-dialog',
  standalone: true,
  imports: [CommonModule, MatDialogModule, MatButtonModule, MatIconModule],
  template: `
    <div class="minimal-dialog" [ngClass]="urgencyClass">
      <!-- Static Header -->
      <div class="dialog-header" [style.background-color]="headerColor">
        <mat-icon [style.color]="iconColor">warning</mat-icon>
        <h2 mat-dialog-title [style.color]="textColor">Session Expiration Warning</h2>
      </div>

      <!-- Content -->
      <mat-dialog-content class="dialog-content">
        <p class="message">Your session is about to expire, please refresh to stay logged in.</p>
        
        <div class="time-remaining" [style.color]="timeColor">
          <span class="label">Time remaining:</span>
          <span class="time-value">{{ data.remainingMinutes }} minutes</span>
        </div>
      </mat-dialog-content>

      <!-- Action Buttons -->
      <mat-dialog-actions class="dialog-actions">
        <button mat-raised-button 
                [style.background-color]="buttonColor"
                [style.color]="'white'"
                (click)="refresh()"
                class="refresh-btn">
          <mat-icon>refresh</mat-icon>
          Refresh
        </button>

        <button mat-button 
                (click)="dismiss()"
                [disabled]="data.remainingMinutes < 5"
                class="dismiss-btn">
          Dismiss
        </button>
      </mat-dialog-actions>
    </div>
  `,
  styles: [`
    .minimal-dialog {
      min-width: 400px;
      max-width: 500px;
    }

    /* Header */
    .dialog-header {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 20px 24px;
      margin: -24px -24px 20px -24px;
    }

    .dialog-header h2 {
      margin: 0;
      font-size: 18px;
      font-weight: 600;
    }

    .dialog-header mat-icon {
      font-size: 24px;
      width: 24px;
      height: 24px;
    }

    /* Content */
    .dialog-content {
      padding: 0 24px 20px 24px;
    }

    .message {
      font-size: 16px;
      line-height: 1.5;
      color: #333;
      margin-bottom: 20px;
    }

    .time-remaining {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 20px;
      background: #f8f9fa;
      border-radius: 8px;
      border-left: 4px solid;
      margin-bottom: 20px;
    }

    .label {
      font-weight: 500;
      font-size: 14px;
    }

    .time-value {
      font-weight: 700;
      font-size: 18px;
    }

    /* Actions */
    .dialog-actions {
      display: flex;
      gap: 12px;
      padding: 0 24px 24px 24px;
      justify-content: flex-end;
    }

    .refresh-btn {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 600;
    }

    .dismiss-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    /* Urgency Classes */
    .critical .time-remaining {
      border-left-color: #f44336;
    }

    .warning .time-remaining {
      border-left-color: #ff9800;
    }

    .normal .time-remaining {
      border-left-color: #4caf50;
    }

    /* Responsive */
    @media (max-width: 480px) {
      .minimal-dialog {
        min-width: 320px;
      }
      
      .dialog-actions {
        flex-direction: column;
      }
      
      .refresh-btn {
        width: 100%;
      }
    }
  `]
})
export class MinimalTokenExpiryDialogComponent implements OnInit {
  urgencyClass = '';
  headerColor = '';
  iconColor = '';
  textColor = '';
  timeColor = '';
  buttonColor = '';

  data: TokenExpiryData;

  constructor(
    public dialogRef: MatDialogRef<MinimalTokenExpiryDialogComponent>,
    @Inject(MAT_DIALOG_DATA) dialogData: TokenExpiryData
  ) {
    this.data = dialogData;
  }

  ngOnInit(): void {
    this.setUrgencyColors();
  }

  private setUrgencyColors(): void {
    if (this.data.remainingMinutes < 5) {
      // Critical - Red
      this.urgencyClass = 'critical';
      this.headerColor = '#ffebee';
      this.iconColor = '#d32f2f';
      this.textColor = '#d32f2f';
      this.timeColor = '#d32f2f';
      this.buttonColor = '#f44336';
    } else if (this.data.remainingMinutes < 10) {
      // Warning - Orange
      this.urgencyClass = 'warning';
      this.headerColor = '#fff3e0';
      this.iconColor = '#f57c00';
      this.textColor = '#f57c00';
      this.timeColor = '#f57c00';
      this.buttonColor = '#ff9800';
    } else {
      // Normal - Green
      this.urgencyClass = 'normal';
      this.headerColor = '#e8f5e8';
      this.iconColor = '#388e3c';
      this.textColor = '#388e3c';
      this.timeColor = '#388e3c';
      this.buttonColor = '#4caf50';
    }
  }

  refresh(): void {
    this.dialogRef.close({ action: 'refresh' });
  }

  dismiss(): void {
    this.dialogRef.close({ action: 'dismiss' });
  }
}
