import { Component, OnInit } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';

@Component({
  selector: 'app-token-expiry-dialog',
  templateUrl: './token-expiry-dialog.component.html',
  styleUrls: ['./token-expiry-dialog.component.css']
})
export class TokenExpiryDialogComponent implements OnInit {
  urgencyDisplay: any;
  remainingMinutes: number;

  constructor(public dialogRef: MatDialogRef<TokenExpiryDialogComponent>) { }

  ngOnInit(): void {
    // Initialize remainingMinutes and calculate urgency display
    this.remainingMinutes = 30; // Example value
    this.calculateUrgencyDisplay();
  }

  calculateUrgencyDisplay(): void {
    if (this.remainingMinutes <= 5) {
      // CRITICAL - Red theme with urgent alert
      this.urgencyDisplay = {
        level: 'critical',
        color: '#d32f2f',
        backgroundColor: 'rgba(244, 67, 54, 0.12)',
        borderColor: '#f44336',
        icon: 'error',
        title: '🚨 Token Expiry Alert',
        message: 'Your session will expire in ' + this.remainingMinutes + ' minutes. Please refresh your token immediately.',
        showAnimation: true
      };
    } else if (this.remainingMinutes <= 15) {
      // WARNING - Yellow theme with caution alert
      this.urgencyDisplay = {
        level: 'warning',
        color: '#fbc02d',
        backgroundColor: 'rgba(255, 193, 7, 0.12)',
        borderColor: '#ffeb3b',
        icon: 'warning',
        title: '⚠️ Token Expiry Warning',
        message: 'Your session will expire in ' + this.remainingMinutes + ' minutes. Consider refreshing your token soon.',
        showAnimation: false
      };
    } else {
      // NORMAL - Green theme but still an alert
      this.urgencyDisplay = {
        level: 'normal',
        color: '#388e3c',
        backgroundColor: 'rgba(76, 175, 80, 0.12)',
        borderColor: '#4caf50',
        icon: 'schedule',
        title: '⏰ Token Expiry Notice',
        message: 'Your session will expire in ' + this.remainingMinutes + ' minutes. You may want to refresh your token when convenient.',
        showAnimation: false
      };
    }
  }

  getStatusText(): string {
    switch (this.urgencyDisplay.level) {
      case 'critical': return '🚨 CRITICAL';
      case 'warning': return '⚠️ WARNING';
      case 'normal': return '⏰ NOTICE';
      default: return 'UNKNOWN';
    }
  }

  getUrgencyBadgeText(): string {
    switch (this.urgencyDisplay.level) {
      case 'critical': return 'URGENT';
      case 'warning': return 'WARNING';
      case 'normal': return 'NOTICE';
      default: return '';
    }
  }

  closeDialog(): void {
    this.dialogRef.close();
  }
}




template: `
    <div class="token-expiry-dialog" [ngClass]="urgencyDisplay.level">
      <!-- Dynamic Header with Urgency Colors -->
      <div class="dialog-header" 
           [style.background]="urgencyDisplay.backgroundColor"
           [style.border-left-color]="urgencyDisplay.borderColor"
           [ngClass]="{ 'animate-pulse': urgencyDisplay.showAnimation }">
        <mat-icon class="header-icon" [style.color]="urgencyDisplay.color">
          {{ urgencyDisplay.icon }}
        </mat-icon>
        <h2 mat-dialog-title [style.color]="urgencyDisplay.color">
          {{ urgencyDisplay.title }}
        </h2>
      </div>

      <!-- Content Area -->
      <mat-dialog-content class="dialog-content">
        <!-- Time Display with Urgency Styling -->
        <div class="time-container" 
             [style.border-color]="urgencyDisplay.borderColor"
             [style.background]="urgencyDisplay.backgroundColor"
             [ngClass]="{ 'shake': urgencyDisplay.level === 'critical' }">
          <div class="time-display" [style.color]="urgencyDisplay.color">
            <span class="time-value">{{ data.remainingMinutes }}</span>
            <span class="time-unit">minutes</span>
          </div>
          <div class="time-label">remaining</div>
          
          <!-- Urgency indicator -->
          <div class="urgency-badge" 
               [style.background-color]="urgencyDisplay.color"
               [ngClass]="urgencyDisplay.level">
            {{ getUrgencyBadgeText() }}
          </div>
        </div>

        <!-- Urgency Message -->
        <div class="urgency-message" 
             [style.background-color]="urgencyDisplay.backgroundColor"
             [style.border-left-color]="urgencyDisplay.borderColor">
          <mat-icon [style.color]="urgencyDisplay.color">{{ urgencyDisplay.icon }}</mat-icon>
          <div class="message-content">
            <p class="message-text" [style.color]="urgencyDisplay.color">
              {{ urgencyDisplay.message }}
            </p>
            <span class="urgency-level" [style.color]="urgencyDisplay.color">
              {{ urgencyDisplay.level.toUpperCase() }} PRIORITY
            </span>
          </div>
        </div>

        <!-- Token Details -->
        <div class="token-details">
          <div class="detail-row">
            <span class="label">Token Type:</span>
            <span class="value">{{ data.tokenType || 'Access Token' }}</span>
          </div>
          <div class="detail-row" *ngIf="data.expiryTime">
            <span class="label">Expires At:</span>
            <span class="value">{{ data.expiryTime | date:'short' }}</span>
          </div>
          <div class="detail-row">
            <span class="label">Status:</span>
            <span class="value status-value" 
                  [style.color]="urgencyDisplay.color" 
                  [ngClass]="urgencyDisplay.level + '-status'">
              {{ getStatusText() }}
            </span>
          </div>
        </div>
      </mat-dialog-content>

      <!-- Action Buttons with Dynamic Colors -->
      <mat-dialog-actions class="dialog-actions">
        <button mat-raised-button 
                [style.background-color]="urgencyDisplay.color"
                [style.color]="'#ffffff'"
                (click)="refreshToken()"
                class="primary-action"
                [ngClass]="{ 'pulse-button': urgencyDisplay.level === 'critical' }">
          <mat-icon>refresh</mat-icon>
          {{ urgencyDisplay.level === 'critical' ? 'REFRESH NOW' : 'Refresh Token' }}
        </button>

        <button mat-stroked-button 
                [style.border-color]="urgencyDisplay.borderColor"
                [style.color]="urgencyDisplay.color"
                (click)="extendSession()"
                *ngIf="urgencyDisplay.level !== 'critical'"
                class="secondary-action">
          <mat-icon>schedule</mat-icon>
          Extend Session
        </button>

        <button mat-button 
                (click)="dismissDialog()"
                [disabled]="urgencyDisplay.level === 'critical'"
                class="dismiss-action"
                [ngClass]="{ 'disabled-critical': urgencyDisplay.level === 'critical' }">
          <mat-icon>{{ urgencyDisplay.level === 'critical' ? 'block' : 'close' }}</mat-icon>
          {{ urgencyDisplay.level === 'critical' ? 'Cannot Dismiss' : 'Dismiss' }}
        </button>
      </mat-dialog-actions>

      <!-- Critical Warning Banner -->
      <div class="critical-banner" *ngIf="urgencyDisplay.level === 'critical'">
        <mat-icon>priority_high</mat-icon>
        <span>IMMEDIATE ACTION REQUIRED - TOKEN EXPIRES IN {{ data.remainingMinutes }} MINUTES</span>
      </div>
    </div>
  `,
  styles: [`
    .token-expiry-dialog {
      min-width: 450px;
      max-width: 550px;
      overflow: hidden;
      position: relative;
    }

    /* Header Styles */
    .dialog-header {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 24px;
      margin: -24px -24px 24px -24px;
      border-left: 6px solid;
      position: relative;
    }

    .header-icon {
      font-size: 32px;
      width: 32px;
      height: 32px;
    }

    .dialog-header h2 {
      margin: 0;
      font-size: 22px;
      font-weight: 700;
      letter-spacing: 0.5px;
    }

    /* Time Display */
    .time-container {
      text-align: center;
      padding: 32px 24px;
      border: 4px solid;
      border-radius: 16px;
      margin-bottom: 24px;
      position: relative;
      backdrop-filter: blur(10px);
    }

    .time-display {
      margin-bottom: 12px;
      position: relative;
    }

    .time-value {
      font-size: 56px;
      font-weight: 900;
      display: block;
      line-height: 1;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .time-unit {
      font-size: 18px;
      font-weight: 600;
      margin-left: 12px;
      opacity: 0.8;
    }

    .time-label {
      font-size: 14px;
      color: #666;
      text-transform: uppercase;
      letter-spacing: 2px;
      font-weight: 600;
      margin-bottom: 16px;
    }

    .urgency-badge {
      position: absolute;
      top: 12px;
      right: 12px;
      color: white;
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 11px;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    /* Urgency Message */
    .urgency-message {
      display: flex;
      align-items: flex-start;
      gap: 16px;
      padding: 20px 24px;
      border-radius: 12px;
      border-left: 6px solid;
      margin-bottom: 24px;
      backdrop-filter: blur(5px);
    }

    .message-content {
      flex: 1;
    }

    .message-text {
      margin: 0 0 8px 0;
      font-weight: 600;
      font-size: 16px;
      line-height: 1.4;
    }

    .urgency-level {
      font-size: 12px;
      font-weight: 700;
      letter-spacing: 1px;
      opacity: 0.8;
    }

    /* Token Details */
    .token-details {
      background: linear-gradient(135deg, #f8f9fa, #e9ecef);
      padding: 20px 24px;
      border-radius: 12px;
      margin-bottom: 24px;
      border: 1px solid #dee2e6;
    }

    .detail-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
    }

    .detail-row:last-child {
      margin-bottom: 0;
    }

    .label {
      font-weight: 600;
      color: #495057;
    }

    .value {
      font-weight: 700;
      color: #212529;
    }

    .status-value {
      font-weight: 800;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* Action Buttons */
    .dialog-actions {
      display: flex;
      gap: 12px;
      padding: 0 24px 24px 24px;
      justify-content: flex-end;
      flex-wrap: wrap;
    }

    .primary-action {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 700;
      min-width: 160px;
      font-size: 14px;
      letter-spacing: 0.5px;
    }

    .secondary-action {
      display: flex;
      align-items: center;
      gap: 8px;
      font-weight: 600;
    }

    .dismiss-action {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .disabled-critical {
      opacity: 0.4;
      cursor: not-allowed;
    }

    /* Critical Warning Banner */
    .critical-banner {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(90deg, #d32f2f, #f44336);
      color: white;
      padding: 12px 24px;
      display: flex;
      align-items: center;
      gap: 12px;
      font-weight: 700;
      font-size: 12px;
      letter-spacing: 1px;
      animation: flash 2s infinite;
    }

    /* Urgency Level Specific Styles */
    .critical .dialog-header {
      background: linear-gradient(135deg, #ffebee, #ffcdd2);
      border-left-color: #d32f2f;
    }

    .critical .time-container {
      background: linear-gradient(135deg, rgba(244, 67, 54, 0.05), rgba(244, 67, 54, 0.1));
      border-color: #f44336;
    }

    .critical .urgency-message {
      background: linear-gradient(135deg, rgba(244, 67, 54, 0.1), rgba(244, 67, 54, 0.15));
      border-left-color: #d32f2f;
    }

    .warning .dialog-header {
      background: linear-gradient(135deg, #fff3e0, #ffe0b2);
      border-left-color: #f57c00;
    }

    .warning .time-container {
      background: linear-gradient(135deg, rgba(255, 152, 0, 0.05), rgba(255, 152, 0, 0.1));
      border-color: #ff9800;
    }

    .warning .urgency-message {
      background: linear-gradient(135deg, rgba(255, 152, 0, 0.1), rgba(255, 152, 0, 0.15));
      border-left-color: #f57c00;
    }

    .normal .dialog-header {
      background: linear-gradient(135deg, #e8f5e8, #c8e6c9);
      border-left-color: #388e3c;
    }

    .normal .time-container {
      background: linear-gradient(135deg, rgba(76, 175, 80, 0.05), rgba(76, 175, 80, 0.1));
      border-color: #4caf50;
    }

    .normal .urgency-message {
      background: linear-gradient(135deg, rgba(76, 175, 80, 0.1), rgba(76, 175, 80, 0.15));
      border-left-color: #388e3c;
    }

    /* Animations */
    .animate-pulse {
      animation: pulse 1.5s infinite;
    }

    .shake {
      animation: shake 0.8s infinite;
    }

    .pulse-button {
      animation: pulse-button 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { 
        opacity: 1; 
        transform: scale(1);
      }
      50% { 
        opacity: 0.85; 
        transform: scale(1.02);
      }
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      10%, 30%, 50%, 70%, 90% { transform: translateX(-3px); }
      20%, 40%, 60%, 80% { transform: translateX(3px); }
    }

    @keyframes pulse-button {
      0%, 100% { 
        box-shadow: 0 0 0 0 rgba(244, 67, 54, 0.7);
      }
      70% { 
        box-shadow: 0 0 0 10px rgba(244, 67, 54, 0);
      }
    }

    @keyframes flash {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.8; }
    }

    /* Responsive Design */
    @media (max-width: 480px) {
      .token-expiry-dialog {
        min-width: 320px;
      }
      
      .time-value {
        font-size: 42px;
      }
      
      .dialog-actions {
        flex-direction: column;
      }
      
      .primary-action,
      .secondary-action {
        width: 100%;
      }
    }

    /* Accessibility */
    @media (prefers-reduced-motion: reduce) {
      .animate-pulse,
      .shake,
      .pulse-button,
      .flash {
        animation: none;
      }
    }

    @media (prefers-contrast: high) {
      .time-container {
        border-width: 6px;
      }
      
      .urgency-message {
        border-left-width: 8px;
      }
    }
  `]
